<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>临界矩阵的DFS、BFS参数配置</title>
    <url>//posts/undefined/</url>
    <content><![CDATA[<p>不管是树还是图，<strong>DFS</strong>都是基于  <strong>递归</strong>  编写的，<br>                               <strong>BFS</strong>是基于  <strong>队列</strong>  编写的。</p>
<span id="more"></span>


<p>对于<strong>树</strong>来说，因为其<strong>具有</strong>的<strong>父与子</strong>的层次结构，DFS和BFS按上下次序遍历即可；</p>
<p>而对于<strong>图</strong>，其结构是<strong>无上下层次</strong>的，顾在对其遍历时，我们会<strong>设置一个bool数组</strong>来记录结点是否已访问，以避免重复遍历。</p>
<h3 id="邻接矩阵版-DFS、BFS代码编写的一些细节记录："><a href="#邻接矩阵版-DFS、BFS代码编写的一些细节记录：" class="headerlink" title="邻接矩阵版  DFS、BFS代码编写的一些细节记录："></a><em>邻接矩阵版</em>  DFS、BFS代码编写的一些细节记录：</h3><p>代码中有两种参数需要注意：<strong>node型的点</strong>和<strong>int型的点</strong></p>
<p>而需注意传参的函数有**bool judge()<strong>和</strong>void BFS()/DFS()**。</p>
<p>​        首先两者的**bool judge(int x,int y)**适用传入x，y值</p>
<p>​        而对于<strong>BFS()和DFS()<strong>函数的参数则没有限制，传</strong>单int</strong>(int v)、<strong>node</strong>或者<strong>双int</strong>(int x,int y)都行。</p>
<p>但node型结构体都得定义。</p>
<p>如何将  <strong>双int型(x,y)</strong>  或  <strong>单int型int v</strong>  匹配到<strong>node型</strong>呢？</p>
<p>​        1.对于传x,y的BFS，node只作为队列的变量，如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">truequeue&lt;node&gt; Q;</span><br><span class="line">truenode Node;</span><br><span class="line">trueNode.x=x,Node.y=y;</span><br><span class="line">trueQ.<span class="built_in">push</span>(Node);</span><br><span class="line">    flag[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">     ...   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里node的作用仅是用来便于存储队列里的(x,y)点；</p>
<p>​        2.对于传node的BFS，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(node S)</span></span>&#123;</span><br><span class="line">truequeue&lt;node&gt; Q;</span><br><span class="line">trueQ.<span class="built_in">push</span>(S);</span><br><span class="line">true<span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">truetrue...</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，<strong>queue Q里永远存的是node型</strong>，但如果直接传node型，将难以记录<strong>连通块</strong>的个数</p>
<p>总结：</p>
<p>​    对于大多数情况：bool judge的参数为(int x,int y);</p>
<p>​                                    DFS<strong>两种都行</strong>(int x,int y)/DFS(int v),分别对应<strong>bool flag[x] [y]<strong>和</strong>bool flag[v]</strong>;  </p>
<p>​                                    BFS也是<strong>两种都行</strong>(int x,int y)/BFS(int v),如上。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>//posts/undefined/</url>
    <content><![CDATA[<h1 id="快速幂的使用方法："><a href="#快速幂的使用方法：" class="headerlink" title="快速幂的使用方法："></a>快速幂的使用方法：</h1><blockquote>
<p>给定三个正整数a、b、m(a&lt;$10^9$ ,b&lt;$10^{18}$,1&lt;m&lt;$10^9$),求$a^b$%m。</p>
</blockquote>
<span id="more"></span>

<p>当要处理的正整数数据较大时，此时应采用<strong>快速幂</strong>进行计算，快速幂（二分幂）基于二分的方法：</p>
<ol>
<li>如果b是奇数，那么有$a^b$ = a * $a^{b-1}$</li>
<li>如果b是偶数，那么有$a^b$ = $a^{b-2}$ * $a^{b-2}$</li>
</ol>
<p>原理就是上面这原理，下面讲下快速幂较常规好在哪里<br>　　常规计算的时间复杂度为O(b),由于采用二分的方法,快速幂的时间复杂度为O($logb$),下面给出快速幂的递归写法:</p>
<pre><code class="C++">typedef long long LL;
//求$a^b$ % m,递归写法
LL binaryPow(LL a,LL b,LL m)&#123;
    if(b==0) return 1;
    if(b &amp; 1) return a*binaryPow(a,b-1,m) % m;
    else&#123;
        LL mul=binaryPow(a,b/2,m);//此处要先记录mul的值,否则后句要执行两次binaryPow(a,b/2,m)
        return mul * mul % m;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>声明</title>
    <url>//posts/null/</url>
    <content><![CDATA[<p>本博客模板是在“班班”的博客<a href="https://github.com/lei2rock/blog"><i class="fab fa-fw fa-github"></i>Lei2rock/Blog</a>基础上进行的修改，感谢班班，原博客地址：<a href="https://blog.dlzhang.com/">https://blog.dlzhang.com</a></p>
<span id="more"></span>]]></content>
  </entry>
</search>
